# -*- coding: utf-8 -*-import arcpyclass Toolbox(object):    def __init__(self):        """Define the toolbox (the name of the toolbox is the name of the        .pyt file)."""        self.label = "Toolbox"        self.alias = "toolbox"        # List of tool classes associated with this toolbox        self.tools = [Tool]class Tool(object):    def __init__(self):        """Define the tool (tool name is the name of the class)."""        self.label = "My Tool"        self.description = ""        self.canRunInBackground = False    def getParameterInfo(self):        """Define parameter definitions"""        input1 = arcpy.Parameter(            displayName="Input Features",            name="in_features",            datatype="String",            parameterType="Required",            direction="Input")        input2 = arcpy.Parameter(            displayName="Input Features 2",            name="in_features2",            datatype="String",            parameterType="Required",            direction="Input")        params = [input1, input2]        return params    def isLicensed(self):        """Set whether tool is licensed to execute."""        return True    def updateParameters(self, parameters):        """Modify the values and properties of parameters before internal        validation is performed.  This method is called whenever a parameter        has been changed."""        return    def updateMessages(self, parameters):        """Modify the messages created by internal validation for each tool        parameter.  This method is called after internal validation."""        return    def execute(self, params, messages):        """The source code of the tool."""        input1 = params[0].valueAsText        input2 = params[1].valueAsText        arcpy.AddMessage(f"This is input 1: {input1}\nThis is input 2: {input2}")        return